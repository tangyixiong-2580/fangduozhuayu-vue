	
<template>
  <div class="app">
    <div class="Consignee-message">
      <div class="suib">
        <div class="Headline">填写发件人信息</div>
        <div class="wire"></div>
      </div>
      <div class="message">
        <div class="expressage">平台预约顺丰或京东快递上门，请准确填写取件地址</div>
        <div class="Field">
          <span class="Field-name">姓名:</span>
          <input style="outline:none;" class="Input" v-model="orderData.name" />
        </div>
        <div class="Field">
          <span class="Field-name">电话:</span>
          <input class="Input" type="Number" v-model="orderData.mailingPhone" />
        </div>
        <div class="Field">
          <span class="Field-name">地址:</span>
          <!-- <input class="Input" v-model="orderData.mailingAddress" /> -->
          <van-button @click="showAddress = true">{{orderData.mailingAddress}}</van-button>
          <van-popup v-model="showAddress" position="bottom">
            <van-area
              :area-list="areaList"
              :columns-num="3"
              title="选择城市"
              value="addrInfo"
              @confirm="changeAddr"
              @cancel="showAddress = false"
            />
          </van-popup>
        </div>
        <div class="Field">
          <span class="Field-name"></span>
          <textarea class="Input" v-model="orderData.detailedAddress"></textarea>
        </div>
        <div class="wire-two"></div>
        <div class="Field">
          <span class="Field-name">时间:</span>
          <!-- <input class="Input" :value="orderData.createTime | moment" /> -->
          <van-popup v-model="showTime" position="bottom">
            <div class="root">
              <div class="root-modal">
                <div class="modal-top">
                  <div class="content">
                    <button class="content-date button date-font">明天（8 月 15 日）</button>
                    <button class="content-date button">周五（8 月 16 日）</button>
                    <button class="content-date button">周六（8 月 17 日）</button>
                    <button class="content-date button">周日（8 月 18 日）</button>
                    <button class="content-date button">周一（8 月 19 日）</button>
                    <button class="content-date button">周二（8 月 20 日）</button>
                  </div>
                  <div class="content">
                    <button class="content-time button date-font">9:00 - 10:00</button>
                    <button class="content-time button">10:00 - 11:00</button>
                    <button class="content-time button">11:00 - 12:00</button>
                    <button class="content-time button">12:00 - 13:00</button>
                    <button class="content-time button">13:00 - 14:00</button>
                    <button class="content-time button">14:00 - 15:00</button>
                    <button class="content-time button">15:00 - 16:00</button>
                    <button class="content-time button">16:00 - 17:00</button>
                    <button class="content-time button">17:00 - 18:00</button>
                  </div>
                </div>

                <div class="modal-bottom">
                  <button class="bottom-ye button">确定</button>
                </div>
              </div>
            </div>
          </van-popup>
        </div>
      </div>
    </div>

    <div class="blank"></div>
    <div class="IP-anonym">
      <div class="wrap">
        <div class="IP-desc">
          <div>
            <span class="IP-anonymous">匿名卖书</span>
          </div>
          <div>
            <span class="IP-tip">开启后其他人不会知道你卖了这些</span>
          </div>
        </div>
        <div
          class="Checkbox"
          :class="{anonymous:isAnonymous==1}"
          @click="isAnonymous = !isAnonymous"
        >
          <div>
            <svg
              width="14.5"
              height="11"
              viewBox="11 14 29 22"
              stroke="#FFFFFF"
              stroke-width="4"
              fill="none"
            >
              <polyline points="13.2427972 23.7361617 21.8111153 32.3044798 38 16.1155951" />
            </svg>
          </div>
        </div>
      </div>
    </div>
    <div class="blank"></div>

    <div class="book-message">
      <div v-for="(book,index) of unsoldBooks" :key="index">
        <div class="book-price">
          <div class="books-name">{{book.title}}</div>
          <div class="money">
            <span>￥{{(book.highestPrice).toFixed(2)}}</span>
          </div>
        </div>
      </div>

      <div class="line"></div>

      <div class="book-price-two">
        <div class="books-name-two">总价</div>
        <div class="money">￥{{totalPrice.toFixed(2)}}</div>
      </div>
      <div class="root-five">
        <div class="name-five">
          <span class="name-five">运费</span>
        </div>
        <div class="value-five">
          <span class="Price">￥0.00</span>
        </div>
      </div>

      <div class="xian"></div>

      <div class="price-interval">
        <div class="temp-name">
          最高可卖：
          <span class="final">
            <span class="price" style="margin-right:4px">￥{{totalPrice.toFixed(2)}}</span>
          </span>
        </div>
        <div class="sell-order-revenueTip">
          <div></div>
          <div class="predict">
            预估价格区间
            <span class="Price">￥{{lowestPrice.toFixed(2)}}</span>~
            <span class="Price">￥{{totalPrice.toFixed(2)}}</span>
            <router-link
              to="/support/condition"
              style="font-weight: 100;margin-left: 4px;text-decoration: none;display: flex;align-items: center;color:rgb(170,170,170)"
            >
              <svg
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                xmlns="http://www.w3.org/2000/svg"
                height="12"
                class="Icon"
              >
                <circle cx="12" cy="12" r="10" />
                <line x1="12" y1="16" x2="12" y2="12" />
                <line x1="12" y1="8" x2="12" y2="8" />
              </svg>
            </router-link>
          </div>
        </div>
      </div>

      <div class="Fixed" style="z-index: 10;">
        <div>
          <div
            @click="commitOrders()"
            class="Button Button--primary Button--block"
            style="border-radius: 0px; line-height: 32px;"
          >提交订单</div>
        </div>
        <div class="Fix-iphone-x"></div>
      </div>
    </div>
  </div>
</template>
<script>
import areaList from "./area";
import axios from "axios";
import { Message } from "element-ui";
export default {
  data() {
    return {
      orderData: {
        name: "",
        mailingPhone: "",
        mailingAddress: "",
        detailedAddress: "",
        createTime: "",
        sellAnonymous: 0,
        sellPrice: 0
      },
      totalPrice: 0,
      lowestPrice: 0,
      isAnonymous: 0,
      unsoldBooks: [],
      userId: 0,

      areaList: areaList,
      showAddress: false,
      addrInfo: 440309,

      showTime: false
    };
  },
  created() {
    this.loadUnsoldBooks();
    this.information();
    let time = new Date();
  },
  methods: {
    commitOrders() {
      let mailingPhone = Number(this.orderData.mailingPhone);
      if (this.orderData.name === "") {
        this.$message({
          type: "error",
          message: "请填写用户名"
        });
        return;
      } else if (!mailingPhone || !/^1[3456789]\d{9}$/.test(mailingPhone)) {
        this.$message("请填写正确的手机号");
        return;
      } else if (!this.orderData.mailingAddress) {
        this.$message({
          type: "error",
          message: "请填写所在的地区"
        });
        return;
      } else {
        this.commitOrder();
      }
    },
    async loadUnsoldBooks() {
      await axios
        .get("/book/unsold")
        .then(
          res =>
            (this.unsoldBooks = res.data.data.filter(book => book.receive == 1))
        );
      this.unsoldBooks.map(book => {
        this.totalPrice += parseFloat(book.highestPrice.toFixed(2));
        this.lowestPrice += parseFloat(book.lowestPrice.toFixed(2));
      });
    },
    async commitOrder() {
      this.orderData.sellAnonymous = this.isAnonymous;
      this.orderData.sellPrice = this.totalPrice;
      let object = JSON.parse(JSON.stringify(this.orderData));
      await axios
        .post("/order", object, {
          headers: {
            "Content-Type": "application/json;charset=utf-8"
          }
        })
        .then(res => {
          this.$router.push({
            path: "/orderParticulars",
            query: {
              orderId: res.data.data.orderId
            }
          });
        })
        .catch(function(error) {});
    },
    async information() {
      await axios
        .get("/user/addr")
        .then(res => (this.orderData = res.data.data));
      console.info(this.orderData);
    },
    changeAddr(val) {
      this.orderData.mailingAddress = "";
      val.map(addr => (this.orderData.mailingAddress += addr.name + " "));
      this.showAddress = false;
    }
  }
};
</script>

<style lang="scss">
@import "../../assets/scss/sellBook/order.scss";
</style>
